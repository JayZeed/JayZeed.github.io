<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JJ❤22</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-08T16:14:37.851Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JJZhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>两数之和</title>
    <link href="http://yoursite.com/2018/10/08/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>http://yoursite.com/2018/10/08/两数之和/</id>
    <published>2018-10-08T12:52:24.054Z</published>
    <updated>2018-10-08T16:14:37.851Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目（简单）"><a href="#题目（简单）" class="headerlink" title="题目（简单）"></a>题目（简单）</h2><p>给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。<br>你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。<br>示例:<br>给定 nums = [2, 7, 11, 15], target = 9<br>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p><hr><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="我的解法"><a href="#我的解法" class="headerlink" title="我的解法"></a>我的解法</h3><pre><code>class Solution {public int[] twoSum(int[] nums, int target) {    for(int i=0;i&lt;nums.length;++i)    {        int T = target - nums[i];        for(int j=i+1;j&lt;nums.length;++j)        {            if(nums[j] == T)              return new int[]{i, j};  //不需要提前申请，直接可以返回        }    }    throw new IllegalArgumentException(&quot;No two sum solution&quot;); //抛出错误  }}</code></pre><h3 id="1-暴力解法"><a href="#1-暴力解法" class="headerlink" title="1.暴力解法"></a>1.暴力解法</h3><p>暴力法很简单。遍历每个元素 xx，并查找是否存在一个值与 target - xtarget−x 相等的目标元素。<br>    <pre><code>public int[] twoSum(int[] nums, int target) {<br>    for (int i = 0; i &lt; nums.length; i++) {<br>        for (int j = i + 1; j &lt; nums.length; j++) {<br>            if (nums[j] == target - nums[i]) {<br>                return new int[] { i, j };<br>            }<br>        }<br>    }<br>    throw new IllegalArgumentException(“No two sum solution”);<br>}</code></pre></p><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li>时间复杂度：O(n<sup>2</sup>)，对于每个元素，我们试图通过遍历数组的其余部分来寻找它所对应的目标元素，这将耗费O(n)的时间。因此时间复杂度为 O(n<sup>2</sup>)。</li><li>空间复杂度：O(1)。</li></ul><h3 id="2-两遍哈希表"><a href="#2-两遍哈希表" class="headerlink" title="2.两遍哈希表"></a>2.两遍哈希表</h3><p>为了对运行时间复杂度进行优化，我们需要一种更有效的方法来检查数组中是否存在目标元素。如果存在，我们需要找出它的索引。保持数组中的每个元素与其索引相互对应的最好方法是什么？哈希表。<br>通过以空间换取速度的方式，我们可以将查找时间从O(n)降低到O(1)。哈希表正是为此目的而构建的，它支持以<strong>近似</strong>恒定的时间进行快速查找。我用“近似”来描述，是因为一旦出现冲突，查找用时可能会退化到O(n)。但只要你仔细地挑选哈希函数，在哈希表中进行查找的用时应当被摊销为O(1)。<br>一个简单的实现使用了两次迭代。在第一次迭代中，我们将每个元素的值和它的索引添加到表中。然后，在第二次迭代中，我们将检查每个元素所对应的目标元素（target - nums[i]）是否存在于表中。注意，该目标元素不能是nums[i]本身！<br>    <pre><code>public int[] twoSum(int[] nums, int target) {<br>    Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();<br>    for (int i = 0; i &lt; nums.length; i++) {<br>        map.put(nums[i], i);<br>    }<br>    for (int i = 0; i &lt; nums.length; i++) {<br>        int complement = target - nums[i];<br>        if (map.containsKey(complement) &amp;&amp; map.get(complement) != i) {  //containsKey方法判断Map集合对象中是否包含指定的键名。如果Map集合中包含指定的键名，则返回true，否则返回false<br>            return new int[] { i, map.get(complement) };<br>        }<br>    }<br>    throw new IllegalArgumentException(“No two sum solution”);<br>}</code></pre></p><h4 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li>时间复杂度：O(n)，我们把包含有n个元素的列表遍历两次。由于哈希表将查找时间缩短到O(1) ，所以时间复杂度为O(n)。</li><li>空间复杂度：O(n)，所需的额外空间取决于哈希表中存储的元素数量，该表中存储了n个元素。 </li></ul><h3 id="3-一遍哈希表"><a href="#3-一遍哈希表" class="headerlink" title="3.一遍哈希表"></a>3.一遍哈希表</h3><p>事实证明，我们可以一次完成。在进行迭代并将元素插入到表中的同时，我们还会回过头来检查表中是否已经存在当前元素所对应的目标元素。如果它存在，那我们已经找到了对应解，并立即将其返回。<br>    <pre><code>public int[] twoSum(int[] nums, int target) {<br>    Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();<br>    for (int i = 0; i &lt; nums.length; i++) {<br>        int complement = target - nums[i];<br>        if (map.containsKey(complement)) {<br>            return new int[] { map.get(complement), i };<br>        }<br>        map.put(nums[i], i);<br>    }<br>    throw new IllegalArgumentException(“No two sum solution”);<br>}</code></pre></p><h4 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li>时间复杂度：O(n)，我们只遍历了包含有n个元素的列表一次。在表中进行的每次查找只花费O(1)的时间。</li><li>空间复杂度：O(n)，所需的额外空间取决于哈希表中存储的元素数量，该表最多需要存储n个元素。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目（简单）&quot;&gt;&lt;a href=&quot;#题目（简单）&quot; class=&quot;headerlink&quot; title=&quot;题目（简单）&quot;&gt;&lt;/a&gt;题目（简单）&lt;/h2&gt;&lt;p&gt;给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。&lt;br&gt;你可以假设每个输入只对应一种答案，且同样
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Next主题如何添加打赏功能</title>
    <link href="http://yoursite.com/2018/10/03/Hexo%20Next%E4%B8%BB%E9%A2%98%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E6%89%93%E8%B5%8F%E5%8A%9F%E8%83%BD/"/>
    <id>http://yoursite.com/2018/10/03/Hexo Next主题如何添加打赏功能/</id>
    <published>2018-10-03T12:16:19.735Z</published>
    <updated>2018-10-03T13:14:51.779Z</updated>
    
    <content type="html"><![CDATA[<p>最近搭建博客时想要添加个打赏功能，虽然好像一般也没人打赏= = 但是咱们是那种见钱眼开的人么？不是！所以————<br>咱们还是添加一个吧！<br><a id="more"></a></p><hr><p>在网上查了些资料，有的方法试了发现没成功，可能因为主题不一样的原因，由于我使用的Next主题，所以先把Next主题下的添加打赏方法写出来。</p><h2 id="基于Next主题"><a href="#基于Next主题" class="headerlink" title="基于Next主题"></a>基于Next主题</h2><h3 id="1-准备支付宝和微信二维码"><a href="#1-准备支付宝和微信二维码" class="headerlink" title="1.准备支付宝和微信二维码"></a>1.准备支付宝和微信二维码</h3><p>&ensp;&ensp;首先得准备支付宝和微信的收款二维码（直接打开相应软件，到收款功能处保存二维码即可），然后将对应图片放在<strong>next\source\images</strong>路径下，并命名为<strong>wechatpay.jpg</strong>和<strong>alipay.jpg</strong>（文件名称随意，不过后面会用到，当然你用PNG格式也是可以的）</p><h3 id="2-在-config-yml中添加图片路径"><a href="#2-在-config-yml中添加图片路径" class="headerlink" title="2.在_config.yml中添加图片路径"></a>2.在_config.yml中添加图片路径</h3><p>&ensp;&ensp;注意此处<strong>_config.yml</strong>是<strong>主题配置文件</strong>，不要弄错了。打开后找到如下属性,并配置路径:</p><pre><code>**reward_comment:** 坚持原创技术分享，您的支持将鼓励我继续创作！**wechatpay:** /images/wechatpay.jpg**alipay:** /images/alipay.jpg</code></pre><h3 id="3-修复闪动bug"><a href="#3-修复闪动bug" class="headerlink" title="3.修复闪动bug"></a>3.修复闪动bug</h3><p>修改next/source/css/_common/components/post/post-reward.styl，注释wechat:hover和alipay:hover</p><pre><code>/* 注释文字闪动函数#wechat:hover p{animation: roll 0.1s infinite linear;-webkit-animation: roll 0.1s infinite linear;-moz-animation: roll 0.1s infinite linear;}#alipay:hover p{animation: roll 0.1s infinite linear;-webkit-animation: roll 0.1s infinite linear;-moz-animation: roll 0.1s infinite linear;}*/ </code></pre><h3 id="4-效果"><a href="#4-效果" class="headerlink" title="4.效果"></a>4.效果</h3><p><img src="/uploads/donate.jpg" alt="打赏"></p><h2 id="基于其他主题"><a href="#基于其他主题" class="headerlink" title="基于其他主题"></a>基于其他主题</h2><p>其他主题的我没有尝试，此处转载一个链接，里面有关于打赏实现的方法，希望能有帮助：<a href="https://blog.csdn.net/l_201607/article/details/81097278" target="_blank" rel="noopener">https://blog.csdn.net/l_201607/article/details/81097278</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近搭建博客时想要添加个打赏功能，虽然好像一般也没人打赏= = 但是咱们是那种见钱眼开的人么？不是！所以————&lt;br&gt;咱们还是添加一个吧！&lt;br&gt;
    
    </summary>
    
      <category term="Hexo静态博客" scheme="http://yoursite.com/categories/Hexo%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Next" scheme="http://yoursite.com/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>数据结构的广义定义和狭义定义</title>
    <link href="http://yoursite.com/2018/10/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E5%B9%BF%E4%B9%89%E5%AE%9A%E4%B9%89%E5%92%8C%E7%8B%AD%E4%B9%89%E5%AE%9A%E4%B9%89/"/>
    <id>http://yoursite.com/2018/10/03/数据结构的广义定义和狭义定义/</id>
    <published>2018-10-03T08:24:22.000Z</published>
    <updated>2018-10-03T08:35:50.430Z</updated>
    
    <content type="html"><![CDATA[<p>最近看了关于数据结构的课程，打算重温一下数据结构的知识，正好又新搭建了个人博客，打算把学习过程中的一些知识点记录下来，方便以后温习。<br><a id="more"></a> </p><h2 id="广义定义"><a href="#广义定义" class="headerlink" title="广义定义"></a>广义定义</h2><p>指一组数据结构的存储结构。算法就是操作数据的一组方法。</p><h2 id="狭义定义"><a href="#狭义定义" class="headerlink" title="狭义定义"></a>狭义定义</h2><p>指某些著名的数据结构和算法，如队列、栈、堆、二分查找、动态规划等。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近看了关于数据结构的课程，打算重温一下数据结构的知识，正好又新搭建了个人博客，打算把学习过程中的一些知识点记录下来，方便以后温习。&lt;br&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Hexo配置文件 subtile和description内容如何换行</title>
    <link href="http://yoursite.com/2018/10/01/Hexo%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%20subtile%E5%92%8Cdescription%E5%86%85%E5%AE%B9%E5%A6%82%E4%BD%95%E6%8D%A2%E8%A1%8C/"/>
    <id>http://yoursite.com/2018/10/01/Hexo配置文件 subtile和description内容如何换行/</id>
    <published>2018-10-01T14:59:22.000Z</published>
    <updated>2018-10-03T12:19:19.522Z</updated>
    
    <content type="html"><![CDATA[<p>配置Hexo个人博客时，站点配置文件<strong>_config.yml</strong>中个人信息可能需要换行，此时只需要在换行位置加上换行符即可。具体方法如下：<br><a id="more"></a> </p><h2 id="使用-lt-br-实现换行"><a href="#使用-lt-br-实现换行" class="headerlink" title="使用&lt;br>实现换行"></a>使用&lt;br>实现换行</h2><pre><code># Sitetitle: JJ❤22subtitle:description: QQ:339003672&lt;br&gt;WeChat:Zhang_junj #分行keywords:author: JJZhanglanguage: zh-Hanstimezone:</code></pre><p>直接在换行位置加入<strong>&lt;br></strong>即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;配置Hexo个人博客时，站点配置文件&lt;strong&gt;_config.yml&lt;/strong&gt;中个人信息可能需要换行，此时只需要在换行位置加上换行符即可。具体方法如下：&lt;br&gt;
    
    </summary>
    
      <category term="Hexo静态博客" scheme="http://yoursite.com/categories/Hexo%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="个人博客" scheme="http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
